/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.grupo.unidaddered.master.logic.ejb;

import co.edu.uniandes.csw.grupo.usuariounidaddered.logic.dto.UsuarioUnidadDeRedDTO;
import co.edu.uniandes.csw.grupo.usuariounidaddered.persistence.api.IUsuarioUnidadDeRedPersistence;
import co.edu.uniandes.csw.grupo.problema.logic.dto.ProblemaDTO;
import co.edu.uniandes.csw.grupo.problema.persistence.api.IProblemaPersistence;
import co.edu.uniandes.csw.grupo.unidaddered.logic.dto.UnidadDeRedDTO;
import co.edu.uniandes.csw.grupo.unidaddered.master.logic.api._IUnidadDeRedMasterLogicService;
import co.edu.uniandes.csw.grupo.unidaddered.master.logic.dto.UnidadDeRedMasterDTO;
import co.edu.uniandes.csw.grupo.unidaddered.master.persistence.api.IUnidadDeRedMasterPersistence;
import co.edu.uniandes.csw.grupo.unidaddered.master.persistence.entity.UnidadDeRedusuariosEntity;
import co.edu.uniandes.csw.grupo.unidaddered.master.persistence.entity.UnidadDeRedproblemasEntity;
import co.edu.uniandes.csw.grupo.unidaddered.persistence.api.IUnidadDeRedPersistence;
import javax.inject.Inject;

public abstract class _UnidadDeRedMasterLogicService implements _IUnidadDeRedMasterLogicService {

    @Inject
    protected IUnidadDeRedPersistence unidadderedPersistance;
    @Inject
    protected IUnidadDeRedMasterPersistence unidadderedMasterPersistance;
    @Inject
    protected IProblemaPersistence problemaPersistance;
    @Inject
    protected IUsuarioUnidadDeRedPersistence usuarioUnidadDeRedPersistance;

    public UnidadDeRedMasterDTO createMasterUnidadDeRed(UnidadDeRedMasterDTO unidaddered) {
        UnidadDeRedDTO persistedUnidadDeRedDTO = unidadderedPersistance.createUnidadDeRed(unidaddered.getUnidadDeRedEntity());
        if (unidaddered.getCreateusuarios() != null) {
            for (UsuarioUnidadDeRedDTO usuarioUnidadDeRedDTO : unidaddered.getCreateusuarios()) {
                UsuarioUnidadDeRedDTO createdUsuarioUnidadDeRedDTO = usuarioUnidadDeRedPersistance.createUsuarioUnidadDeRed(usuarioUnidadDeRedDTO);
                UnidadDeRedusuariosEntity unidadderedUsuarioUnidadDeRedEntity = new UnidadDeRedusuariosEntity(persistedUnidadDeRedDTO.getId(), createdUsuarioUnidadDeRedDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedusuariosEntity(unidadderedUsuarioUnidadDeRedEntity);
            }
        }
        if (unidaddered.getCreateproblemas() != null) {
            for (ProblemaDTO problemaDTO : unidaddered.getCreateproblemas()) {
                ProblemaDTO createdProblemaDTO = problemaPersistance.createProblema(problemaDTO);
                UnidadDeRedproblemasEntity unidadderedProblemaEntity = new UnidadDeRedproblemasEntity(persistedUnidadDeRedDTO.getId(), createdProblemaDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedproblemasEntity(unidadderedProblemaEntity);
            }
        }
        // update usuarioUnidadDeRed
        if (unidaddered.getUpdateusuarios() != null) {
            for (UsuarioUnidadDeRedDTO usuarioUnidadDeRedDTO : unidaddered.getUpdateusuarios()) {
                usuarioUnidadDeRedPersistance.updateUsuarioUnidadDeRed(usuarioUnidadDeRedDTO);
                UnidadDeRedusuariosEntity unidadderedUsuarioUnidadDeRedEntity = new UnidadDeRedusuariosEntity(persistedUnidadDeRedDTO.getId(), usuarioUnidadDeRedDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedusuariosEntity(unidadderedUsuarioUnidadDeRedEntity);
            }
        }
        // update problema
        if (unidaddered.getUpdateproblemas() != null) {
            for (ProblemaDTO problemaDTO : unidaddered.getUpdateproblemas()) {
                problemaPersistance.updateProblema(problemaDTO);
                UnidadDeRedproblemasEntity unidadderedProblemaEntity = new UnidadDeRedproblemasEntity(persistedUnidadDeRedDTO.getId(), problemaDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedproblemasEntity(unidadderedProblemaEntity);
            }
        }
        return unidaddered;
    }

    public UnidadDeRedMasterDTO getMasterUnidadDeRed(Long id) {
        return unidadderedMasterPersistance.getUnidadDeRed(id);
    }

    public void deleteMasterUnidadDeRed(Long id) {
        unidadderedPersistance.deleteUnidadDeRed(id);
    }

    public void updateMasterUnidadDeRed(UnidadDeRedMasterDTO unidaddered) {
        unidadderedPersistance.updateUnidadDeRed(unidaddered.getUnidadDeRedEntity());

        //---- FOR RELATIONSHIP
        // persist new usuarioUnidadDeRed
        if (unidaddered.getCreateusuarios() != null) {
            for (UsuarioUnidadDeRedDTO usuarioUnidadDeRedDTO : unidaddered.getCreateusuarios()) {
                UsuarioUnidadDeRedDTO createdUsuarioUnidadDeRedDTO = usuarioUnidadDeRedPersistance.createUsuarioUnidadDeRed(usuarioUnidadDeRedDTO);
                UnidadDeRedusuariosEntity unidadderedUsuarioUnidadDeRedEntity = new UnidadDeRedusuariosEntity(unidaddered.getUnidadDeRedEntity().getId(), createdUsuarioUnidadDeRedDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedusuariosEntity(unidadderedUsuarioUnidadDeRedEntity);
            }
        }
        // update usuarioUnidadDeRed
        if (unidaddered.getUpdateusuarios() != null) {
            for (UsuarioUnidadDeRedDTO usuarioUnidadDeRedDTO : unidaddered.getUpdateusuarios()) {
                usuarioUnidadDeRedPersistance.updateUsuarioUnidadDeRed(usuarioUnidadDeRedDTO);
            }
        }
        // delete usuarioUnidadDeRed
        if (unidaddered.getDeleteusuarios() != null) {
            for (UsuarioUnidadDeRedDTO usuarioUnidadDeRedDTO : unidaddered.getDeleteusuarios()) {
                unidadderedMasterPersistance.deleteUnidadDeRedusuariosEntity(unidaddered.getUnidadDeRedEntity().getId(), usuarioUnidadDeRedDTO.getId());
                usuarioUnidadDeRedPersistance.deleteUsuarioUnidadDeRed(usuarioUnidadDeRedDTO.getId());
            }
        }
        // delete problema
        if (unidaddered.getDeleteproblemas() != null) {
            for (ProblemaDTO problemaDTO : unidaddered.getDeleteproblemas()) {
                unidadderedMasterPersistance.deleteUnidadDeRedproblemasEntity(unidaddered.getUnidadDeRedEntity().getId(), problemaDTO.getId());
            }
        }
        // persist new problema
        if (unidaddered.getCreateproblemas() != null) {
            for (ProblemaDTO problemaDTO : unidaddered.getCreateproblemas()) {
                UnidadDeRedproblemasEntity unidadderedProblemaEntity = new UnidadDeRedproblemasEntity(unidaddered.getUnidadDeRedEntity().getId(), problemaDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedproblemasEntity(unidadderedProblemaEntity);
            }
        }
        // update problema
        if (unidaddered.getUpdateproblemas() != null) {
            for (ProblemaDTO problemaDTO : unidaddered.getUpdateproblemas()) {
                unidadderedMasterPersistance.deleteUnidadDeRedproblemasEntity(unidaddered.getUnidadDeRedEntity().getId(), problemaDTO.getId());
                problemaPersistance.updateProblema(problemaDTO);
                UnidadDeRedproblemasEntity unidadderedProblemaEntity = new UnidadDeRedproblemasEntity(unidaddered.getId(), problemaDTO.getId());
                unidadderedMasterPersistance.createUnidadDeRedproblemasEntity(unidadderedProblemaEntity);
                
            }
        }
    }
}
